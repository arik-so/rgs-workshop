import { Result_ChannelPublicKeysDecodeErrorZ } from '../structs/Result_ChannelPublicKeysDecodeErrorZ.mjs';
import { CommonBase } from './CommonBase.mjs';
/**
 * One counterparty's public keys which do not change over the life of a channel.
 */
export declare class ChannelPublicKeys extends CommonBase {
    /**
     * The public key which is used to sign all commitment transactions, as it appears in the
     * on-chain channel lock-in 2-of-2 multisig output.
     */
    get_funding_pubkey(): Uint8Array;
    /**
     * The public key which is used to sign all commitment transactions, as it appears in the
     * on-chain channel lock-in 2-of-2 multisig output.
     */
    set_funding_pubkey(val: Uint8Array): void;
    /**
     * The base point which is used (with derive_public_revocation_key) to derive per-commitment
     * revocation keys. This is combined with the per-commitment-secret generated by the
     * counterparty to create a secret which the counterparty can reveal to revoke previous
     * states.
     */
    get_revocation_basepoint(): Uint8Array;
    /**
     * The base point which is used (with derive_public_revocation_key) to derive per-commitment
     * revocation keys. This is combined with the per-commitment-secret generated by the
     * counterparty to create a secret which the counterparty can reveal to revoke previous
     * states.
     */
    set_revocation_basepoint(val: Uint8Array): void;
    /**
     * The public key on which the non-broadcaster (ie the countersignatory) receives an immediately
     * spendable primary channel balance on the broadcaster's commitment transaction. This key is
     * static across every commitment transaction.
     */
    get_payment_point(): Uint8Array;
    /**
     * The public key on which the non-broadcaster (ie the countersignatory) receives an immediately
     * spendable primary channel balance on the broadcaster's commitment transaction. This key is
     * static across every commitment transaction.
     */
    set_payment_point(val: Uint8Array): void;
    /**
     * The base point which is used (with derive_public_key) to derive a per-commitment payment
     * public key which receives non-HTLC-encumbered funds which are only available for spending
     * after some delay (or can be claimed via the revocation path).
     */
    get_delayed_payment_basepoint(): Uint8Array;
    /**
     * The base point which is used (with derive_public_key) to derive a per-commitment payment
     * public key which receives non-HTLC-encumbered funds which are only available for spending
     * after some delay (or can be claimed via the revocation path).
     */
    set_delayed_payment_basepoint(val: Uint8Array): void;
    /**
     * The base point which is used (with derive_public_key) to derive a per-commitment public key
     * which is used to encumber HTLC-in-flight outputs.
     */
    get_htlc_basepoint(): Uint8Array;
    /**
     * The base point which is used (with derive_public_key) to derive a per-commitment public key
     * which is used to encumber HTLC-in-flight outputs.
     */
    set_htlc_basepoint(val: Uint8Array): void;
    /**
     * Constructs a new ChannelPublicKeys given each field
     */
    static constructor_new(funding_pubkey_arg: Uint8Array, revocation_basepoint_arg: Uint8Array, payment_point_arg: Uint8Array, delayed_payment_basepoint_arg: Uint8Array, htlc_basepoint_arg: Uint8Array): ChannelPublicKeys;
    clone_ptr(): bigint;
    /**
     * Creates a copy of the ChannelPublicKeys
     */
    clone(): ChannelPublicKeys;
    /**
     * Serialize the ChannelPublicKeys object into a byte array which can be read by ChannelPublicKeys_read
     */
    write(): Uint8Array;
    /**
     * Read a ChannelPublicKeys from a byte array, created by ChannelPublicKeys_write
     */
    static constructor_read(ser: Uint8Array): Result_ChannelPublicKeysDecodeErrorZ;
}
