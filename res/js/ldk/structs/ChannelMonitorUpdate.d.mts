import { Result_ChannelMonitorUpdateDecodeErrorZ } from '../structs/Result_ChannelMonitorUpdateDecodeErrorZ.mjs';
import { CommonBase } from './CommonBase.mjs';
/**
 * An update generated by the underlying channel itself which contains some new information the
 * [`ChannelMonitor`] should be made aware of.
 *
 * Because this represents only a small number of updates to the underlying state, it is generally
 * much smaller than a full [`ChannelMonitor`]. However, for large single commitment transaction
 * updates (e.g. ones during which there are hundreds of HTLCs pending on the commitment
 * transaction), a single update may reach upwards of 1 MiB in serialized size.
 */
export declare class ChannelMonitorUpdate extends CommonBase {
    /**
     * The sequence number of this update. Updates *must* be replayed in-order according to this
     * sequence number (and updates may panic if they are not). The update_id values are strictly
     * increasing and increase by one for each new update, with one exception specified below.
     *
     * This sequence number is also used to track up to which points updates which returned
     * ChannelMonitorUpdateErr::TemporaryFailure have been applied to all copies of a given
     * ChannelMonitor when ChannelManager::channel_monitor_updated is called.
     *
     * The only instance where update_id values are not strictly increasing is the case where we
     * allow post-force-close updates with a special update ID of [`CLOSED_CHANNEL_UPDATE_ID`]. See
     * its docs for more details.
     */
    get_update_id(): bigint;
    /**
     * The sequence number of this update. Updates *must* be replayed in-order according to this
     * sequence number (and updates may panic if they are not). The update_id values are strictly
     * increasing and increase by one for each new update, with one exception specified below.
     *
     * This sequence number is also used to track up to which points updates which returned
     * ChannelMonitorUpdateErr::TemporaryFailure have been applied to all copies of a given
     * ChannelMonitor when ChannelManager::channel_monitor_updated is called.
     *
     * The only instance where update_id values are not strictly increasing is the case where we
     * allow post-force-close updates with a special update ID of [`CLOSED_CHANNEL_UPDATE_ID`]. See
     * its docs for more details.
     */
    set_update_id(val: bigint): void;
    clone_ptr(): bigint;
    /**
     * Creates a copy of the ChannelMonitorUpdate
     */
    clone(): ChannelMonitorUpdate;
    /**
     * Serialize the ChannelMonitorUpdate object into a byte array which can be read by ChannelMonitorUpdate_read
     */
    write(): Uint8Array;
    /**
     * Read a ChannelMonitorUpdate from a byte array, created by ChannelMonitorUpdate_write
     */
    static constructor_read(ser: Uint8Array): Result_ChannelMonitorUpdateDecodeErrorZ;
}
