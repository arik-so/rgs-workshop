import { Result_ChannelMonitorUpdateDecodeErrorZ } from '../structs/Result_ChannelMonitorUpdateDecodeErrorZ.mjs';
import { CommonBase } from './CommonBase.mjs';
import * as bindings from '../bindings.mjs';
/**
 * An update generated by the underlying channel itself which contains some new information the
 * [`ChannelMonitor`] should be made aware of.
 *
 * Because this represents only a small number of updates to the underlying state, it is generally
 * much smaller than a full [`ChannelMonitor`]. However, for large single commitment transaction
 * updates (e.g. ones during which there are hundreds of HTLCs pending on the commitment
 * transaction), a single update may reach upwards of 1 MiB in serialized size.
 */
export class ChannelMonitorUpdate extends CommonBase {
    /* @internal */
    constructor(_dummy, ptr) {
        super(ptr, bindings.ChannelMonitorUpdate_free);
    }
    /**
     * The sequence number of this update. Updates *must* be replayed in-order according to this
     * sequence number (and updates may panic if they are not). The update_id values are strictly
     * increasing and increase by one for each new update, with one exception specified below.
     *
     * This sequence number is also used to track up to which points updates which returned
     * ChannelMonitorUpdateErr::TemporaryFailure have been applied to all copies of a given
     * ChannelMonitor when ChannelManager::channel_monitor_updated is called.
     *
     * The only instance where update_id values are not strictly increasing is the case where we
     * allow post-force-close updates with a special update ID of [`CLOSED_CHANNEL_UPDATE_ID`]. See
     * its docs for more details.
     */
    get_update_id() {
        const ret = bindings.ChannelMonitorUpdate_get_update_id(this.ptr);
        return ret;
    }
    /**
     * The sequence number of this update. Updates *must* be replayed in-order according to this
     * sequence number (and updates may panic if they are not). The update_id values are strictly
     * increasing and increase by one for each new update, with one exception specified below.
     *
     * This sequence number is also used to track up to which points updates which returned
     * ChannelMonitorUpdateErr::TemporaryFailure have been applied to all copies of a given
     * ChannelMonitor when ChannelManager::channel_monitor_updated is called.
     *
     * The only instance where update_id values are not strictly increasing is the case where we
     * allow post-force-close updates with a special update ID of [`CLOSED_CHANNEL_UPDATE_ID`]. See
     * its docs for more details.
     */
    set_update_id(val) {
        bindings.ChannelMonitorUpdate_set_update_id(this.ptr, val);
    }
    clone_ptr() {
        const ret = bindings.ChannelMonitorUpdate_clone_ptr(this.ptr);
        return ret;
    }
    /**
     * Creates a copy of the ChannelMonitorUpdate
     */
    clone() {
        const ret = bindings.ChannelMonitorUpdate_clone(this.ptr);
        const ret_hu_conv = new ChannelMonitorUpdate(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * Serialize the ChannelMonitorUpdate object into a byte array which can be read by ChannelMonitorUpdate_read
     */
    write() {
        const ret = bindings.ChannelMonitorUpdate_write(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
    /**
     * Read a ChannelMonitorUpdate from a byte array, created by ChannelMonitorUpdate_write
     */
    static constructor_read(ser) {
        const ret = bindings.ChannelMonitorUpdate_read(bindings.encodeUint8Array(ser));
        const ret_hu_conv = Result_ChannelMonitorUpdateDecodeErrorZ.constr_from_ptr(ret);
        return ret_hu_conv;
    }
}
//# sourceMappingURL=ChannelMonitorUpdate.mjs.map