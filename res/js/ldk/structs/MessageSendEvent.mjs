import { ChannelUpdate } from '../structs/ChannelUpdate.mjs';
import { AcceptChannel } from '../structs/AcceptChannel.mjs';
import { OpenChannel } from '../structs/OpenChannel.mjs';
import { FundingCreated } from '../structs/FundingCreated.mjs';
import { FundingSigned } from '../structs/FundingSigned.mjs';
import { ChannelReady } from '../structs/ChannelReady.mjs';
import { AnnouncementSignatures } from '../structs/AnnouncementSignatures.mjs';
import { CommitmentUpdate } from '../structs/CommitmentUpdate.mjs';
import { RevokeAndACK } from '../structs/RevokeAndACK.mjs';
import { ClosingSigned } from '../structs/ClosingSigned.mjs';
import { Shutdown } from '../structs/Shutdown.mjs';
import { ChannelReestablish } from '../structs/ChannelReestablish.mjs';
import { ChannelAnnouncement } from '../structs/ChannelAnnouncement.mjs';
import { ErrorAction } from '../structs/ErrorAction.mjs';
import { QueryChannelRange } from '../structs/QueryChannelRange.mjs';
import { QueryShortChannelIds } from '../structs/QueryShortChannelIds.mjs';
import { ReplyChannelRange } from '../structs/ReplyChannelRange.mjs';
import { GossipTimestampFilter } from '../structs/GossipTimestampFilter.mjs';
import { CommonBase } from './CommonBase.mjs';
import * as bindings from '../bindings.mjs';
/**
 * An event generated by ChannelManager which indicates a message should be sent to a peer (or
 * broadcast to most peers).
 * These events are handled by PeerManager::process_events if you are using a PeerManager.
 */
export class MessageSendEvent extends CommonBase {
    constructor(_dummy, ptr) { super(ptr, bindings.MessageSendEvent_free); }
    /* @internal */
    static constr_from_ptr(ptr) {
        const raw_ty = bindings.LDKMessageSendEvent_ty_from_ptr(ptr);
        switch (raw_ty) {
            case 0: return new MessageSendEvent_SendAcceptChannel(ptr);
            case 1: return new MessageSendEvent_SendOpenChannel(ptr);
            case 2: return new MessageSendEvent_SendFundingCreated(ptr);
            case 3: return new MessageSendEvent_SendFundingSigned(ptr);
            case 4: return new MessageSendEvent_SendChannelReady(ptr);
            case 5: return new MessageSendEvent_SendAnnouncementSignatures(ptr);
            case 6: return new MessageSendEvent_UpdateHTLCs(ptr);
            case 7: return new MessageSendEvent_SendRevokeAndACK(ptr);
            case 8: return new MessageSendEvent_SendClosingSigned(ptr);
            case 9: return new MessageSendEvent_SendShutdown(ptr);
            case 10: return new MessageSendEvent_SendChannelReestablish(ptr);
            case 11: return new MessageSendEvent_SendChannelAnnouncement(ptr);
            case 12: return new MessageSendEvent_BroadcastChannelAnnouncement(ptr);
            case 13: return new MessageSendEvent_BroadcastChannelUpdate(ptr);
            case 14: return new MessageSendEvent_SendChannelUpdate(ptr);
            case 15: return new MessageSendEvent_HandleError(ptr);
            case 16: return new MessageSendEvent_SendChannelRangeQuery(ptr);
            case 17: return new MessageSendEvent_SendShortIdsQuery(ptr);
            case 18: return new MessageSendEvent_SendReplyChannelRange(ptr);
            case 19: return new MessageSendEvent_SendGossipTimestampFilter(ptr);
            default:
                throw new Error('oops, this should be unreachable'); // Unreachable without extending the (internal) bindings interface
        }
    }
    clone_ptr() {
        const ret = bindings.MessageSendEvent_clone_ptr(this.ptr);
        return ret;
    }
    /**
     * Creates a copy of the MessageSendEvent
     */
    clone() {
        const ret = bindings.MessageSendEvent_clone(this.ptr);
        const ret_hu_conv = MessageSendEvent.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * Utility method to constructs a new SendAcceptChannel-variant MessageSendEvent
     */
    static constructor_send_accept_channel(node_id, msg) {
        const ret = bindings.MessageSendEvent_send_accept_channel(bindings.encodeUint8Array(bindings.check_arr_len(node_id, 33)), msg == null ? 0n : CommonBase.get_ptr_of(msg));
        const ret_hu_conv = MessageSendEvent.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        CommonBase.add_ref_from(ret_hu_conv, msg);
        return ret_hu_conv;
    }
    /**
     * Utility method to constructs a new SendOpenChannel-variant MessageSendEvent
     */
    static constructor_send_open_channel(node_id, msg) {
        const ret = bindings.MessageSendEvent_send_open_channel(bindings.encodeUint8Array(bindings.check_arr_len(node_id, 33)), msg == null ? 0n : CommonBase.get_ptr_of(msg));
        const ret_hu_conv = MessageSendEvent.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        CommonBase.add_ref_from(ret_hu_conv, msg);
        return ret_hu_conv;
    }
    /**
     * Utility method to constructs a new SendFundingCreated-variant MessageSendEvent
     */
    static constructor_send_funding_created(node_id, msg) {
        const ret = bindings.MessageSendEvent_send_funding_created(bindings.encodeUint8Array(bindings.check_arr_len(node_id, 33)), msg == null ? 0n : CommonBase.get_ptr_of(msg));
        const ret_hu_conv = MessageSendEvent.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        CommonBase.add_ref_from(ret_hu_conv, msg);
        return ret_hu_conv;
    }
    /**
     * Utility method to constructs a new SendFundingSigned-variant MessageSendEvent
     */
    static constructor_send_funding_signed(node_id, msg) {
        const ret = bindings.MessageSendEvent_send_funding_signed(bindings.encodeUint8Array(bindings.check_arr_len(node_id, 33)), msg == null ? 0n : CommonBase.get_ptr_of(msg));
        const ret_hu_conv = MessageSendEvent.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        CommonBase.add_ref_from(ret_hu_conv, msg);
        return ret_hu_conv;
    }
    /**
     * Utility method to constructs a new SendChannelReady-variant MessageSendEvent
     */
    static constructor_send_channel_ready(node_id, msg) {
        const ret = bindings.MessageSendEvent_send_channel_ready(bindings.encodeUint8Array(bindings.check_arr_len(node_id, 33)), msg == null ? 0n : CommonBase.get_ptr_of(msg));
        const ret_hu_conv = MessageSendEvent.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        CommonBase.add_ref_from(ret_hu_conv, msg);
        return ret_hu_conv;
    }
    /**
     * Utility method to constructs a new SendAnnouncementSignatures-variant MessageSendEvent
     */
    static constructor_send_announcement_signatures(node_id, msg) {
        const ret = bindings.MessageSendEvent_send_announcement_signatures(bindings.encodeUint8Array(bindings.check_arr_len(node_id, 33)), msg == null ? 0n : CommonBase.get_ptr_of(msg));
        const ret_hu_conv = MessageSendEvent.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        CommonBase.add_ref_from(ret_hu_conv, msg);
        return ret_hu_conv;
    }
    /**
     * Utility method to constructs a new UpdateHTLCs-variant MessageSendEvent
     */
    static constructor_update_htlcs(node_id, updates) {
        const ret = bindings.MessageSendEvent_update_htlcs(bindings.encodeUint8Array(bindings.check_arr_len(node_id, 33)), updates == null ? 0n : CommonBase.get_ptr_of(updates));
        const ret_hu_conv = MessageSendEvent.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        CommonBase.add_ref_from(ret_hu_conv, updates);
        return ret_hu_conv;
    }
    /**
     * Utility method to constructs a new SendRevokeAndACK-variant MessageSendEvent
     */
    static constructor_send_revoke_and_ack(node_id, msg) {
        const ret = bindings.MessageSendEvent_send_revoke_and_ack(bindings.encodeUint8Array(bindings.check_arr_len(node_id, 33)), msg == null ? 0n : CommonBase.get_ptr_of(msg));
        const ret_hu_conv = MessageSendEvent.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        CommonBase.add_ref_from(ret_hu_conv, msg);
        return ret_hu_conv;
    }
    /**
     * Utility method to constructs a new SendClosingSigned-variant MessageSendEvent
     */
    static constructor_send_closing_signed(node_id, msg) {
        const ret = bindings.MessageSendEvent_send_closing_signed(bindings.encodeUint8Array(bindings.check_arr_len(node_id, 33)), msg == null ? 0n : CommonBase.get_ptr_of(msg));
        const ret_hu_conv = MessageSendEvent.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        CommonBase.add_ref_from(ret_hu_conv, msg);
        return ret_hu_conv;
    }
    /**
     * Utility method to constructs a new SendShutdown-variant MessageSendEvent
     */
    static constructor_send_shutdown(node_id, msg) {
        const ret = bindings.MessageSendEvent_send_shutdown(bindings.encodeUint8Array(bindings.check_arr_len(node_id, 33)), msg == null ? 0n : CommonBase.get_ptr_of(msg));
        const ret_hu_conv = MessageSendEvent.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        CommonBase.add_ref_from(ret_hu_conv, msg);
        return ret_hu_conv;
    }
    /**
     * Utility method to constructs a new SendChannelReestablish-variant MessageSendEvent
     */
    static constructor_send_channel_reestablish(node_id, msg) {
        const ret = bindings.MessageSendEvent_send_channel_reestablish(bindings.encodeUint8Array(bindings.check_arr_len(node_id, 33)), msg == null ? 0n : CommonBase.get_ptr_of(msg));
        const ret_hu_conv = MessageSendEvent.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        CommonBase.add_ref_from(ret_hu_conv, msg);
        return ret_hu_conv;
    }
    /**
     * Utility method to constructs a new SendChannelAnnouncement-variant MessageSendEvent
     */
    static constructor_send_channel_announcement(node_id, msg, update_msg) {
        const ret = bindings.MessageSendEvent_send_channel_announcement(bindings.encodeUint8Array(bindings.check_arr_len(node_id, 33)), msg == null ? 0n : CommonBase.get_ptr_of(msg), update_msg == null ? 0n : CommonBase.get_ptr_of(update_msg));
        const ret_hu_conv = MessageSendEvent.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        CommonBase.add_ref_from(ret_hu_conv, msg);
        CommonBase.add_ref_from(ret_hu_conv, update_msg);
        return ret_hu_conv;
    }
    /**
     * Utility method to constructs a new BroadcastChannelAnnouncement-variant MessageSendEvent
     */
    static constructor_broadcast_channel_announcement(msg, update_msg) {
        const ret = bindings.MessageSendEvent_broadcast_channel_announcement(msg == null ? 0n : CommonBase.get_ptr_of(msg), update_msg == null ? 0n : CommonBase.get_ptr_of(update_msg));
        const ret_hu_conv = MessageSendEvent.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        CommonBase.add_ref_from(ret_hu_conv, msg);
        CommonBase.add_ref_from(ret_hu_conv, update_msg);
        return ret_hu_conv;
    }
    /**
     * Utility method to constructs a new BroadcastChannelUpdate-variant MessageSendEvent
     */
    static constructor_broadcast_channel_update(msg) {
        const ret = bindings.MessageSendEvent_broadcast_channel_update(msg == null ? 0n : CommonBase.get_ptr_of(msg));
        const ret_hu_conv = MessageSendEvent.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        CommonBase.add_ref_from(ret_hu_conv, msg);
        return ret_hu_conv;
    }
    /**
     * Utility method to constructs a new SendChannelUpdate-variant MessageSendEvent
     */
    static constructor_send_channel_update(node_id, msg) {
        const ret = bindings.MessageSendEvent_send_channel_update(bindings.encodeUint8Array(bindings.check_arr_len(node_id, 33)), msg == null ? 0n : CommonBase.get_ptr_of(msg));
        const ret_hu_conv = MessageSendEvent.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        CommonBase.add_ref_from(ret_hu_conv, msg);
        return ret_hu_conv;
    }
    /**
     * Utility method to constructs a new HandleError-variant MessageSendEvent
     */
    static constructor_handle_error(node_id, action) {
        const ret = bindings.MessageSendEvent_handle_error(bindings.encodeUint8Array(bindings.check_arr_len(node_id, 33)), CommonBase.get_ptr_of(action));
        const ret_hu_conv = MessageSendEvent.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        return ret_hu_conv;
    }
    /**
     * Utility method to constructs a new SendChannelRangeQuery-variant MessageSendEvent
     */
    static constructor_send_channel_range_query(node_id, msg) {
        const ret = bindings.MessageSendEvent_send_channel_range_query(bindings.encodeUint8Array(bindings.check_arr_len(node_id, 33)), msg == null ? 0n : CommonBase.get_ptr_of(msg));
        const ret_hu_conv = MessageSendEvent.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        CommonBase.add_ref_from(ret_hu_conv, msg);
        return ret_hu_conv;
    }
    /**
     * Utility method to constructs a new SendShortIdsQuery-variant MessageSendEvent
     */
    static constructor_send_short_ids_query(node_id, msg) {
        const ret = bindings.MessageSendEvent_send_short_ids_query(bindings.encodeUint8Array(bindings.check_arr_len(node_id, 33)), msg == null ? 0n : CommonBase.get_ptr_of(msg));
        const ret_hu_conv = MessageSendEvent.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        CommonBase.add_ref_from(ret_hu_conv, msg);
        return ret_hu_conv;
    }
    /**
     * Utility method to constructs a new SendReplyChannelRange-variant MessageSendEvent
     */
    static constructor_send_reply_channel_range(node_id, msg) {
        const ret = bindings.MessageSendEvent_send_reply_channel_range(bindings.encodeUint8Array(bindings.check_arr_len(node_id, 33)), msg == null ? 0n : CommonBase.get_ptr_of(msg));
        const ret_hu_conv = MessageSendEvent.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        CommonBase.add_ref_from(ret_hu_conv, msg);
        return ret_hu_conv;
    }
    /**
     * Utility method to constructs a new SendGossipTimestampFilter-variant MessageSendEvent
     */
    static constructor_send_gossip_timestamp_filter(node_id, msg) {
        const ret = bindings.MessageSendEvent_send_gossip_timestamp_filter(bindings.encodeUint8Array(bindings.check_arr_len(node_id, 33)), msg == null ? 0n : CommonBase.get_ptr_of(msg));
        const ret_hu_conv = MessageSendEvent.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        CommonBase.add_ref_from(ret_hu_conv, msg);
        return ret_hu_conv;
    }
}
/** A MessageSendEvent of type SendAcceptChannel */
export class MessageSendEvent_SendAcceptChannel extends MessageSendEvent {
    /* @internal */
    constructor(ptr) {
        super(null, ptr);
        const node_id = bindings.LDKMessageSendEvent_SendAcceptChannel_get_node_id(ptr);
        const node_id_conv = bindings.decodeUint8Array(node_id);
        this.node_id = node_id_conv;
        const msg = bindings.LDKMessageSendEvent_SendAcceptChannel_get_msg(ptr);
        const msg_hu_conv = new AcceptChannel(null, msg);
        CommonBase.add_ref_from(msg_hu_conv, this);
        this.msg = msg_hu_conv;
    }
}
/** A MessageSendEvent of type SendOpenChannel */
export class MessageSendEvent_SendOpenChannel extends MessageSendEvent {
    /* @internal */
    constructor(ptr) {
        super(null, ptr);
        const node_id = bindings.LDKMessageSendEvent_SendOpenChannel_get_node_id(ptr);
        const node_id_conv = bindings.decodeUint8Array(node_id);
        this.node_id = node_id_conv;
        const msg = bindings.LDKMessageSendEvent_SendOpenChannel_get_msg(ptr);
        const msg_hu_conv = new OpenChannel(null, msg);
        CommonBase.add_ref_from(msg_hu_conv, this);
        this.msg = msg_hu_conv;
    }
}
/** A MessageSendEvent of type SendFundingCreated */
export class MessageSendEvent_SendFundingCreated extends MessageSendEvent {
    /* @internal */
    constructor(ptr) {
        super(null, ptr);
        const node_id = bindings.LDKMessageSendEvent_SendFundingCreated_get_node_id(ptr);
        const node_id_conv = bindings.decodeUint8Array(node_id);
        this.node_id = node_id_conv;
        const msg = bindings.LDKMessageSendEvent_SendFundingCreated_get_msg(ptr);
        const msg_hu_conv = new FundingCreated(null, msg);
        CommonBase.add_ref_from(msg_hu_conv, this);
        this.msg = msg_hu_conv;
    }
}
/** A MessageSendEvent of type SendFundingSigned */
export class MessageSendEvent_SendFundingSigned extends MessageSendEvent {
    /* @internal */
    constructor(ptr) {
        super(null, ptr);
        const node_id = bindings.LDKMessageSendEvent_SendFundingSigned_get_node_id(ptr);
        const node_id_conv = bindings.decodeUint8Array(node_id);
        this.node_id = node_id_conv;
        const msg = bindings.LDKMessageSendEvent_SendFundingSigned_get_msg(ptr);
        const msg_hu_conv = new FundingSigned(null, msg);
        CommonBase.add_ref_from(msg_hu_conv, this);
        this.msg = msg_hu_conv;
    }
}
/** A MessageSendEvent of type SendChannelReady */
export class MessageSendEvent_SendChannelReady extends MessageSendEvent {
    /* @internal */
    constructor(ptr) {
        super(null, ptr);
        const node_id = bindings.LDKMessageSendEvent_SendChannelReady_get_node_id(ptr);
        const node_id_conv = bindings.decodeUint8Array(node_id);
        this.node_id = node_id_conv;
        const msg = bindings.LDKMessageSendEvent_SendChannelReady_get_msg(ptr);
        const msg_hu_conv = new ChannelReady(null, msg);
        CommonBase.add_ref_from(msg_hu_conv, this);
        this.msg = msg_hu_conv;
    }
}
/** A MessageSendEvent of type SendAnnouncementSignatures */
export class MessageSendEvent_SendAnnouncementSignatures extends MessageSendEvent {
    /* @internal */
    constructor(ptr) {
        super(null, ptr);
        const node_id = bindings.LDKMessageSendEvent_SendAnnouncementSignatures_get_node_id(ptr);
        const node_id_conv = bindings.decodeUint8Array(node_id);
        this.node_id = node_id_conv;
        const msg = bindings.LDKMessageSendEvent_SendAnnouncementSignatures_get_msg(ptr);
        const msg_hu_conv = new AnnouncementSignatures(null, msg);
        CommonBase.add_ref_from(msg_hu_conv, this);
        this.msg = msg_hu_conv;
    }
}
/** A MessageSendEvent of type UpdateHTLCs */
export class MessageSendEvent_UpdateHTLCs extends MessageSendEvent {
    /* @internal */
    constructor(ptr) {
        super(null, ptr);
        const node_id = bindings.LDKMessageSendEvent_UpdateHTLCs_get_node_id(ptr);
        const node_id_conv = bindings.decodeUint8Array(node_id);
        this.node_id = node_id_conv;
        const updates = bindings.LDKMessageSendEvent_UpdateHTLCs_get_updates(ptr);
        const updates_hu_conv = new CommitmentUpdate(null, updates);
        CommonBase.add_ref_from(updates_hu_conv, this);
        this.updates = updates_hu_conv;
    }
}
/** A MessageSendEvent of type SendRevokeAndACK */
export class MessageSendEvent_SendRevokeAndACK extends MessageSendEvent {
    /* @internal */
    constructor(ptr) {
        super(null, ptr);
        const node_id = bindings.LDKMessageSendEvent_SendRevokeAndACK_get_node_id(ptr);
        const node_id_conv = bindings.decodeUint8Array(node_id);
        this.node_id = node_id_conv;
        const msg = bindings.LDKMessageSendEvent_SendRevokeAndACK_get_msg(ptr);
        const msg_hu_conv = new RevokeAndACK(null, msg);
        CommonBase.add_ref_from(msg_hu_conv, this);
        this.msg = msg_hu_conv;
    }
}
/** A MessageSendEvent of type SendClosingSigned */
export class MessageSendEvent_SendClosingSigned extends MessageSendEvent {
    /* @internal */
    constructor(ptr) {
        super(null, ptr);
        const node_id = bindings.LDKMessageSendEvent_SendClosingSigned_get_node_id(ptr);
        const node_id_conv = bindings.decodeUint8Array(node_id);
        this.node_id = node_id_conv;
        const msg = bindings.LDKMessageSendEvent_SendClosingSigned_get_msg(ptr);
        const msg_hu_conv = new ClosingSigned(null, msg);
        CommonBase.add_ref_from(msg_hu_conv, this);
        this.msg = msg_hu_conv;
    }
}
/** A MessageSendEvent of type SendShutdown */
export class MessageSendEvent_SendShutdown extends MessageSendEvent {
    /* @internal */
    constructor(ptr) {
        super(null, ptr);
        const node_id = bindings.LDKMessageSendEvent_SendShutdown_get_node_id(ptr);
        const node_id_conv = bindings.decodeUint8Array(node_id);
        this.node_id = node_id_conv;
        const msg = bindings.LDKMessageSendEvent_SendShutdown_get_msg(ptr);
        const msg_hu_conv = new Shutdown(null, msg);
        CommonBase.add_ref_from(msg_hu_conv, this);
        this.msg = msg_hu_conv;
    }
}
/** A MessageSendEvent of type SendChannelReestablish */
export class MessageSendEvent_SendChannelReestablish extends MessageSendEvent {
    /* @internal */
    constructor(ptr) {
        super(null, ptr);
        const node_id = bindings.LDKMessageSendEvent_SendChannelReestablish_get_node_id(ptr);
        const node_id_conv = bindings.decodeUint8Array(node_id);
        this.node_id = node_id_conv;
        const msg = bindings.LDKMessageSendEvent_SendChannelReestablish_get_msg(ptr);
        const msg_hu_conv = new ChannelReestablish(null, msg);
        CommonBase.add_ref_from(msg_hu_conv, this);
        this.msg = msg_hu_conv;
    }
}
/** A MessageSendEvent of type SendChannelAnnouncement */
export class MessageSendEvent_SendChannelAnnouncement extends MessageSendEvent {
    /* @internal */
    constructor(ptr) {
        super(null, ptr);
        const node_id = bindings.LDKMessageSendEvent_SendChannelAnnouncement_get_node_id(ptr);
        const node_id_conv = bindings.decodeUint8Array(node_id);
        this.node_id = node_id_conv;
        const msg = bindings.LDKMessageSendEvent_SendChannelAnnouncement_get_msg(ptr);
        const msg_hu_conv = new ChannelAnnouncement(null, msg);
        CommonBase.add_ref_from(msg_hu_conv, this);
        this.msg = msg_hu_conv;
        const update_msg = bindings.LDKMessageSendEvent_SendChannelAnnouncement_get_update_msg(ptr);
        const update_msg_hu_conv = new ChannelUpdate(null, update_msg);
        CommonBase.add_ref_from(update_msg_hu_conv, this);
        this.update_msg = update_msg_hu_conv;
    }
}
/** A MessageSendEvent of type BroadcastChannelAnnouncement */
export class MessageSendEvent_BroadcastChannelAnnouncement extends MessageSendEvent {
    /* @internal */
    constructor(ptr) {
        super(null, ptr);
        const msg = bindings.LDKMessageSendEvent_BroadcastChannelAnnouncement_get_msg(ptr);
        const msg_hu_conv = new ChannelAnnouncement(null, msg);
        CommonBase.add_ref_from(msg_hu_conv, this);
        this.msg = msg_hu_conv;
        const update_msg = bindings.LDKMessageSendEvent_BroadcastChannelAnnouncement_get_update_msg(ptr);
        const update_msg_hu_conv = new ChannelUpdate(null, update_msg);
        CommonBase.add_ref_from(update_msg_hu_conv, this);
        this.update_msg = update_msg_hu_conv;
    }
}
/** A MessageSendEvent of type BroadcastChannelUpdate */
export class MessageSendEvent_BroadcastChannelUpdate extends MessageSendEvent {
    /* @internal */
    constructor(ptr) {
        super(null, ptr);
        const msg = bindings.LDKMessageSendEvent_BroadcastChannelUpdate_get_msg(ptr);
        const msg_hu_conv = new ChannelUpdate(null, msg);
        CommonBase.add_ref_from(msg_hu_conv, this);
        this.msg = msg_hu_conv;
    }
}
/** A MessageSendEvent of type SendChannelUpdate */
export class MessageSendEvent_SendChannelUpdate extends MessageSendEvent {
    /* @internal */
    constructor(ptr) {
        super(null, ptr);
        const node_id = bindings.LDKMessageSendEvent_SendChannelUpdate_get_node_id(ptr);
        const node_id_conv = bindings.decodeUint8Array(node_id);
        this.node_id = node_id_conv;
        const msg = bindings.LDKMessageSendEvent_SendChannelUpdate_get_msg(ptr);
        const msg_hu_conv = new ChannelUpdate(null, msg);
        CommonBase.add_ref_from(msg_hu_conv, this);
        this.msg = msg_hu_conv;
    }
}
/** A MessageSendEvent of type HandleError */
export class MessageSendEvent_HandleError extends MessageSendEvent {
    /* @internal */
    constructor(ptr) {
        super(null, ptr);
        const node_id = bindings.LDKMessageSendEvent_HandleError_get_node_id(ptr);
        const node_id_conv = bindings.decodeUint8Array(node_id);
        this.node_id = node_id_conv;
        const action = bindings.LDKMessageSendEvent_HandleError_get_action(ptr);
        const action_hu_conv = ErrorAction.constr_from_ptr(action);
        CommonBase.add_ref_from(action_hu_conv, this);
        this.action = action_hu_conv;
    }
}
/** A MessageSendEvent of type SendChannelRangeQuery */
export class MessageSendEvent_SendChannelRangeQuery extends MessageSendEvent {
    /* @internal */
    constructor(ptr) {
        super(null, ptr);
        const node_id = bindings.LDKMessageSendEvent_SendChannelRangeQuery_get_node_id(ptr);
        const node_id_conv = bindings.decodeUint8Array(node_id);
        this.node_id = node_id_conv;
        const msg = bindings.LDKMessageSendEvent_SendChannelRangeQuery_get_msg(ptr);
        const msg_hu_conv = new QueryChannelRange(null, msg);
        CommonBase.add_ref_from(msg_hu_conv, this);
        this.msg = msg_hu_conv;
    }
}
/** A MessageSendEvent of type SendShortIdsQuery */
export class MessageSendEvent_SendShortIdsQuery extends MessageSendEvent {
    /* @internal */
    constructor(ptr) {
        super(null, ptr);
        const node_id = bindings.LDKMessageSendEvent_SendShortIdsQuery_get_node_id(ptr);
        const node_id_conv = bindings.decodeUint8Array(node_id);
        this.node_id = node_id_conv;
        const msg = bindings.LDKMessageSendEvent_SendShortIdsQuery_get_msg(ptr);
        const msg_hu_conv = new QueryShortChannelIds(null, msg);
        CommonBase.add_ref_from(msg_hu_conv, this);
        this.msg = msg_hu_conv;
    }
}
/** A MessageSendEvent of type SendReplyChannelRange */
export class MessageSendEvent_SendReplyChannelRange extends MessageSendEvent {
    /* @internal */
    constructor(ptr) {
        super(null, ptr);
        const node_id = bindings.LDKMessageSendEvent_SendReplyChannelRange_get_node_id(ptr);
        const node_id_conv = bindings.decodeUint8Array(node_id);
        this.node_id = node_id_conv;
        const msg = bindings.LDKMessageSendEvent_SendReplyChannelRange_get_msg(ptr);
        const msg_hu_conv = new ReplyChannelRange(null, msg);
        CommonBase.add_ref_from(msg_hu_conv, this);
        this.msg = msg_hu_conv;
    }
}
/** A MessageSendEvent of type SendGossipTimestampFilter */
export class MessageSendEvent_SendGossipTimestampFilter extends MessageSendEvent {
    /* @internal */
    constructor(ptr) {
        super(null, ptr);
        const node_id = bindings.LDKMessageSendEvent_SendGossipTimestampFilter_get_node_id(ptr);
        const node_id_conv = bindings.decodeUint8Array(node_id);
        this.node_id = node_id_conv;
        const msg = bindings.LDKMessageSendEvent_SendGossipTimestampFilter_get_msg(ptr);
        const msg_hu_conv = new GossipTimestampFilter(null, msg);
        CommonBase.add_ref_from(msg_hu_conv, this);
        this.msg = msg_hu_conv;
    }
}
//# sourceMappingURL=MessageSendEvent.mjs.map